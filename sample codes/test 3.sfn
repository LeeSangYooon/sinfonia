put 1
put 0
put *0  # condition
put 100
do <=
else skip 6
put *1  # block
put *0
do +
set *1
move -8
put *1
do print

GO 1
PUT 1
PUT 0
PUT &0
PUT 100
DO LESSOREQUAL
ELSESKIP 5
PUT &1
PUT &0
DO PLUS
SET &1
GO 3
PUT &1
DO PRINT

class Cell {
    bool mine;
    bool revealed;
}

class Position {
    int x;
    int y;

    # int, int -> none
    init x y {
        print (sin a) * 2 + 3 - (log 1 4) * (sin 5) * 3 + 1;
        print (1 > 2 and b < (c == 1) + 4 or c == b and 1 > 3);
        this.x = x;
        this.y = y;
        let int c = 12 * 320 + this.y * 13 - 2 * 4 + 1;
        this.x = c * 2 - this.y;
        if c {
            print (c 2) * 2 - 1;
            a = c * 2 -1;
            print (a - (b == c) + d > 1);
            for i in range 10 {
                print i;
                
            }
            while a 12 - this.x {
                print x 1;
            }
        }
        while a 12 - this.x {
                print x 1;
            }
    }
}

# int -> none
print num arg2 {
    print 13 + num;
}

# AST.BlockNode -> MachineCode
generate_block block {
    return sum map generate_statement, block.statements;
}


# List, List -> List
merge a, b {
    if (a.len == 0) {
        return(b);
    }
    if (b.len == 0) {
        return(a);
    }
    if (a[0] < b[0]) {
        return(a[0] + merge(a[1:], b));
    }
    return(b[0] + merge(a, b[1:]));
}

# List -> List
mergesort list {
    if (list.len < 2) {
        return(list);
    }
    const int mid = list.len / 2;
    const List left = mergesort(list[0:mid]);
    const List right = mergesort(list[mid:]);

    return(merge(left, right)); 
}


# int, int -> int
multiply a b {
    if (b == 0) { return 0; }
    return (a + multiply(a, b - 1));
}


# multiply a b (*0: a, *1: b) 지점 A
put *1
put 0
==
else skip 3
pop
put 0
goback # func call stack에 last index 저장되어있고 글로 간다음 pop
put *0
# multiply call
put *0
put *1
put 1
-
func call A
goback

